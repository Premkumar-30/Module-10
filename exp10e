EX NO 10(E): DOUBLY LINKED LIST - DELETE FROM FRONT

AIM:
To write a program to delete a node from the front of a doubly linked list and display the elements.

ALGORITHM:
1.Start.
2.Define the structure for a doubly linked list node.
3.Create functions to insert elements at the end.
4.Create a function to delete a node from the front.
5.Create a function to display the list.
6.Accept user input to perform operations.
7.End.


PROGRAM:
#include <stdio.h>
#include <stdlib.h>

// Define the structure for a node
struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
};

struct Node* head = NULL;

// Function to insert at end
void insertEnd(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->prev = NULL;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
    } else {
        struct Node* temp = head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = newNode;
        newNode->prev = temp;
    }
    printf("%d inserted at end\n", value);
}

// Function to delete from front
void deleteFront() {
    if (head == NULL) {
        printf("List is Empty\n");
        return;
    }
    struct Node* temp = head;
    head = head->next;
    if (head != NULL)
        head->prev = NULL;
    printf("Deleted element: %d\n", temp->data);
    free(temp);
}

// Function to display the list
void display() {
    struct Node* temp = head;
    if (temp == NULL) {
        printf("List is Empty\n");
        return;
    }
    printf("List elements: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    int choice, value;
    do {
        printf("\n1. Insert at End\n2. Delete from Front\n3. Display\n4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter value to insert: ");
                scanf("%d", &value);
                insertEnd(value);
                break;
            case 2:
                deleteFront();
                break;
            case 3:
                display();
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid Choice!\n");
        }
    } while (choice != 4);

    return 0;
}



INPUT:
1
10
1
20
1
30
3
2
3
4



OUTPUT:
Enter your choice: 1
Enter value to insert: 10
10 inserted at end

Enter your choice: 1
Enter value to insert: 20
20 inserted at end

Enter your choice: 1
Enter value to insert: 30
30 inserted at end

Enter your choice: 3
List elements: 10 20 30

Enter your choice: 2
Deleted element: 10

Enter your choice: 3
List elements: 20 30

Enter your choice: 4
Exiting...

RESULT:
Thus, the program is executed and verified successfully
